package org.lucassouza.genius;

import java.awt.Color;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Lucas Souza [sorackb@gmail.com]
 */
public class FrmGenius extends javax.swing.JFrame {

  private final List<Integer> playerOrder = new ArrayList<>();
  private final List<Integer> machineOrder = new ArrayList<>();
  private Integer greaterSuccess = 0;
  private Boolean blocked = false;

  private class Animation extends Thread {

    @Override
    public void run() {
      Long waitingTime = 1000L / machineOrder.size();

      // Não permite que o tempo fique menor que 100 milissegundos
      if (waitingTime < 100L) {
        waitingTime = 100L;
      }

      // Bloqueia o acesso ao usuário
      setBlocked(true);
      try {
        Thread.sleep(500);

        for (Integer buttonOrder : machineOrder) {
          // Limpa as cores para dar um efeito de piscar
          clearColors();
          Thread.sleep(waitingTime);
          changeColor(buttonOrder);
          Thread.sleep(waitingTime);
        }
        // Nunca vai acontecer esse problema
      } catch (InterruptedException ex) {
        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
      }

      clearColors();
      // Desbloqueia para ação do usuário
      setBlocked(false);
    }
  }

  public FrmGenius() {
    initComponents();
    this.setBlocked(true);
    this.clearColors();
  }

  private void start() {
    this.machineOrder.clear();
    this.addMachine();
  }

  private void select(Integer buttonOrder) {
    // Para impedir que o usuário aperte os botões quando a máquina estiver mostrando a nova sequência
    if (!blocked) {
      this.playerOrder.add(buttonOrder);
      this.changeColor(buttonOrder);
      // Avisa o método qual a posição que deve verificar
      this.compare(this.playerOrder.size() - 1);
    }
  }

  private void compare(Integer position) {
    Integer currentSuccess = this.playerOrder.size() + 1;

    // Quer dizer que ele errou
    if (!this.playerOrder.get(position).equals(this.machineOrder.get(position))) {
      if (this.greaterSuccess < currentSuccess) {
        this.greaterSuccess = currentSuccess;
      }
      JOptionPane.showMessageDialog(this, "Você errou na " + (this.playerOrder.size() + 1)
              + "ª posição!\nO seu maior acerto foi de " + this.greaterSuccess
              + " posições.\nIniciando novamente", "Erro!", JOptionPane.WARNING_MESSAGE);
      this.start();
    } else if (this.playerOrder.size() == this.machineOrder.size()) {
      this.addMachine();
    }
  }

  private void addMachine() {
    Random random = new Random();
    Animation animation = new Animation();

    // Cria um valor de 0 até 3 randomico
    this.machineOrder.add(random.nextInt(4));

    // Inicia a animação
    animation.start();
    // Zera porque o jogador deve clicar desde o começo novamente
    this.playerOrder.clear();
  }

  // Public porque é usado na Thread que faz a animação
  public void changeColor(Integer buttonOrder) {
    this.clearColors();

    switch (buttonOrder) {
      case 0:
        this.btnRed.setBackground(Color.RED);
        break;
      case 1:
        this.btnBlue.setBackground(Color.BLUE);
        break;
      case 2:
        this.btnGreen.setBackground(Color.GREEN);
        break;
      default:
        this.btnYellow.setBackground(Color.YELLOW);
    }
  }

  // Public porque é usado na Thread que faz a animação
  public void clearColors() {
    Color color = Color.LIGHT_GRAY;

    this.btnRed.setBackground(color);
    this.btnBlue.setBackground(color);
    this.btnGreen.setBackground(color);
    this.btnYellow.setBackground(color);
  }

  public Boolean getBloqueado() {
    return blocked;
  }

  public void setBlocked(Boolean blocked) {
    this.blocked = blocked;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    btnRed = new javax.swing.JButton();
    btnGreen = new javax.swing.JButton();
    btnYellow = new javax.swing.JButton();
    btnBlue = new javax.swing.JButton();
    btnStart = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    getContentPane().setLayout(new java.awt.GridBagLayout());

    btnRed.setText("1");
    btnRed.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnRedActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 131;
    gridBagConstraints.ipady = 127;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    getContentPane().add(btnRed, gridBagConstraints);

    btnGreen.setText("3");
    btnGreen.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnGreenActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 131;
    gridBagConstraints.ipady = 121;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    getContentPane().add(btnGreen, gridBagConstraints);

    btnYellow.setText("4");
    btnYellow.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnYellowActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.ipadx = 131;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weighty = 0.5;
    getContentPane().add(btnYellow, gridBagConstraints);

    btnBlue.setText("2");
    btnBlue.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnBlueActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(btnBlue, gridBagConstraints);

    btnStart.setText("Iniciar");
    btnStart.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnStartActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    getContentPane().add(btnStart, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnYellowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYellowActionPerformed
    this.select(3);
  }//GEN-LAST:event_btnYellowActionPerformed

  private void btnRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRedActionPerformed
    this.select(0);
  }//GEN-LAST:event_btnRedActionPerformed

  private void btnBlueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBlueActionPerformed
    this.select(1);
  }//GEN-LAST:event_btnBlueActionPerformed

  private void btnGreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGreenActionPerformed
    this.select(2);
  }//GEN-LAST:event_btnGreenActionPerformed

  private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
    this.start();
  }//GEN-LAST:event_btnStartActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(FrmGenius.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(FrmGenius.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(FrmGenius.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(FrmGenius.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        FrmGenius form = new FrmGenius();

        // Centraliza o formulário
        form.setLocationRelativeTo(null);
        form.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnBlue;
  private javax.swing.JButton btnGreen;
  private javax.swing.JButton btnRed;
  private javax.swing.JButton btnStart;
  private javax.swing.JButton btnYellow;
  // End of variables declaration//GEN-END:variables
}
